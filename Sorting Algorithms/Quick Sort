快速排序思想：
- 将序列的第一个元素取出来作为target。
- 使用两个指针，p1指向序列头，p2指向序列尾
- 由于首元素已经被“取走”，首先移动p2，只要arr[p2]不小于target就不断向左移动p2，直到arr[p2]小于target时将arr[p1]的值赋为arr[p2]
- 然后移动p1，只要arr[p1]不大于target就向右不断移动p1，直到arr[p1]大于target时将arr[p2]的值赋为arr[p1]
- 重复上述操作，直到p1与p2相遇，将target插入到arr[p1](或[p2])处，此时target左侧的数都比target小，右侧的数都比target大，于是将target这个元素放到了排序序列中正确的位置
- 递归地对target左侧和右侧的子序列执行上述同样的操作，直到子序列的长度小于等于0时退出。此时已将所有元素放到了正确的位置上。排序完毕。


void QuickSort(int* arr, int startIdx, int endIdx)
{
	int diffLen = endIdx - startIdx;
	if (diffLen <= 0)
		return;

	int target = arr[startIdx];
	int idx1 = startIdx;
	int idx2 = endIdx;

	while (idx1 != idx2)
	{
		while (arr[idx2] >= target && idx2 > idx1)
			--idx2;
		arr[idx1] = arr[idx2];

		while (arr[idx1] < target && idx1 < idx2)
			++idx1;
		arr[idx2] = arr[idx1];
	}
	arr[idx1] = target;

	QuickSort(arr, startIdx, idx1 - 1);
	QuickSort(arr, idx1 + 1, endIdx);

}



int main()
{
	int arr[]{ 6, 3, 7, 10, 3, 7, 8, 9, 6 };
	unsigned len = sizeof(arr) / sizeof(arr[0]);
	QuickSort(arr, 0, len - 1);

	for (int i = 0; i != len; ++i)
		cout << arr[i] << " ";
	cout << endl;

	return 0;
}
