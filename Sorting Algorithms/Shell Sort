希尔排序需要一个变量gap，以它为间隔将序列交错划分出多个子序列。对每个子序列分别进行插入排序后，再将所有子序列整合在一起。
随后将gap减半，重复上面的步骤，以此类推。直到最后一个gap=0，对整个序列执行一遍插入排序，得到最终排序结果。

对序列进行划分和整合的过程描述是为了理解，代码中不用体现。arr[gap]与arr[0]就构成第一个子序列，arr[gap+1]与arr[1]构成另一个子序列，以此类推，
arr[length-1], arr[length-1-gap], arr[length-2*gap]构成一个子序列。只要对子序列中的元素执行同插入排序相同的步骤即可（依次向前比较，将较小的放到前面，直到放置在合适的位置停止）。


void mySwap(int& a, int& b)
{
	int tmp = a;
	a = b;
	b = tmp;
}

void ShellSort(int* arr, unsigned length)
{
	int gap = length / 2;

	while (gap > 0)
	{
		for (int i = gap; i != length; ++i)
		{
			for (int j = i; j >= gap; j = j - gap)
			{
				if (arr[j] < arr[j - gap])
					mySwap(arr[j], arr[j - gap]);

			}
		}
		gap /= 2;
	}
}


int main()
{
	int arr[]{ 3, 5, 2, 7, 6, 8, 10 };
	unsigned len = sizeof(arr) / sizeof(arr[0]);
	ShellSort(arr, len);

	for (int i = 0; i != len; ++i)
		cout << arr[i] << " ";
	cout << endl;

	return 0;
}
